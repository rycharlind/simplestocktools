{"version":3,"sources":["assets/github-logo.svg","assets/logo.svg","style/Flex.style.ts","style/Brand.style.ts","component/ViewSource.tsx","component/Footer.tsx","util/PathUtil.ts","component/Header.tsx","component/Home.tsx","component/options-profit-calc/InputPopover.tsx","component/options-profit-calc/OptionsProfitCalc.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FlexStyle","base","display","alignItems","row","flexDirection","col","spacer","flexGrow","Brand","primary","secondary","brandName","color","fontWeight","fontSize","image","width","height","imageLarge","text","textCenter","textAlign","ViewSource","target","href","style","textDecoration","alt","src","githubLogo","marginRight","React","Component","Footer","padding","justifyContent","PathUtil","path","process","Header","getPath","logo","Home","Jumbotron","backgroundColor","Button","as","variant","InputPopover","title","content","Popover","id","Title","Content","pillStyle","resultValueStyle","OptionsProfileCalc","prop","state","callOrPut","numberOfContracts","optionPrice","strikePrice","stockPrice","totalInvestment","stockPriceValue","strikePriceValue","profit","profitColor","handleInputChange","bind","handleOptionChange","calculate","getDollarValue","getProfitsCell","CardDeck","Card","bg","Body","maxWidth","marginBottom","Form","Group","controlId","Check","inline","label","value","type","checked","this","onChange","Label","InputGroup","Prepend","Text","Control","size","placeholder","Append","OverlayTrigger","trigger","placement","overlay","getPopover","onClick","Table","striped","bordered","hover","displayType","thousandSeparator","prefix","colSpan","Number","elements","calcValuesCall","calcValuesPut","push","alert","Alert","marginTop","numberOfStocks","Math","round","setState","event","App","className","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.478e94e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github-logo.5e2743b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.ed98c4a6.svg\";","import CSS from 'csstype';\n\nexport default class FlexStyle {\n\n    static base: CSS.Properties  = {\n        display: 'flex',\n        alignItems: 'center',\n    }\n    \n    static row: CSS.Properties = {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'row'\n    }\n\n    static col: CSS.Properties = {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column'\n    }\n\n    static spacer: CSS.Properties = {\n        flexGrow: 1\n    }\n\n}\n","import CSS from 'csstype';\n\nexport default class Brand {\n    \n    static primary = '#e91e63';\n    static secondary = '#20232a';\n\n    static brandName: CSS.Properties = {\n        color: Brand.primary,\n        fontWeight: 'bold',\n        fontSize: '24px'\n    }\n\n    static image: CSS.Properties = {\n        color: Brand.primary,\n        width: '36px',\n        height: '36px',\n    }\n\n    static imageLarge: CSS.Properties = {\n        color: Brand.primary,\n        width: '75px',\n        height: '75px',\n    }\n\n    static text: CSS.Properties = {\n        color: Brand.primary,\n        fontSize: '28px',\n        fontWeight: 'bold'\n    }\n\n    static textCenter: CSS.Properties = {\n        color: Brand.primary,\n        fontSize: '56px',\n        fontWeight: 'bold',\n        textAlign: 'center'\n    }\n}","import React from \"react\";\nimport Brand from \"../style/Brand.style\";\nimport githubLogo from '../assets/github-logo.svg';\n\nexport default class ViewSource extends React.Component {\n    render() {\n        return (\n            <a target=\"_new\" href=\"https://github.com/rycharlind/simplestocktools/tree/dev\"\n                style={{ textDecoration: 'none', color: Brand.primary, display: 'flex', alignItems: 'center' }}>\n                <img alt=\"View Source\" src={githubLogo} width=\"40\" height=\"40\" style={{ marginRight: '12px' }} />\n                <span>View Source</span>\n            </a>\n        )\n    }\n}","import React from \"react\";\nimport FlexStyle from \"../style/Flex.style\";\nimport ViewSource from \"./ViewSource\";\n\nexport default class Footer extends React.Component {\n    render() {\n        return (\n            <div style={{ ...FlexStyle.row, ...{ height: '100px', padding: '32px', justifyContent: 'center' } }}>\n                <span style={{marginRight: '16px'}}>\n                    Created with <a target=\"_new\" href=\"https://reactjs.org/\">React.js</a> and <a target=\"_new\" href=\"https://react-bootstrap.github.io\">React Bootstrap</a>\n                </span>\n                <ViewSource></ViewSource>\n            </div>\n        )\n    }\n}","export default class PathUtil {\n    static getPath(path: string) {\n        return process.env.PUBLIC_URL + path;\n    }\n}","import React from \"react\";\nimport logo from '../assets/logo.svg';\nimport Brand from \"../style/Brand.style\";\nimport FlexStyle from \"../style/Flex.style\";\nimport ViewSource from \"./ViewSource\";\nimport PathUtil from \"../util/PathUtil\";\n\nexport default class Header extends React.Component {\n    render() {\n        return (\n            <div style={{ ...FlexStyle.row, ...{ height: '100px', padding: '0px 32px' } }}>\n                <a href={PathUtil.getPath('/')} style={{textDecoration: 'none', display: 'flex', alignItems: 'center'}}>\n                    <img\n                        src={logo}\n                        width=\"40\"\n                        height=\"40\"\n                        alt=\"OptionsCalc\"\n                        style={{ marginRight: '16px' }}\n                    />\n                    <span style={Brand.brandName}>Simple Stock Tools</span>\n                </a>\n                <div style={FlexStyle.spacer}></div>\n                <ViewSource></ViewSource>\n            </div>\n        )\n    }\n}","import React from \"react\"\nimport Jumbotron from \"react-bootstrap/Jumbotron\"\nimport Button from \"react-bootstrap/Button\"\n\nexport default class Home extends React.Component {\n    render() {\n        return (\n            <div>\n                <Jumbotron style={{ backgroundColor: '#37474f' }}>\n                    <h1>Simple Stock Tools</h1>\n                    <p>\n                        An open-source React app that brings easy-to-use web tools for analyzing stock data. \n                    </p>\n                    <p>\n                        <Button as=\"a\" href={process.env.PUBLIC_URL + '/options-calc'} variant=\"primary\">\n                            Try the Stock Options Calculator\n                        </Button>\n                    </p>\n                </Jumbotron>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport Popover from \"react-bootstrap/Popover\";\n\nexport default class InputPopover {\n\n    static getPopover(title: string, content: any) {\n        return (\n            <Popover id=\"popover-basic\">\n                <Popover.Title as=\"h3\"  style={{color:'#000'}}>{title}</Popover.Title>\n                <Popover.Content>{content}</Popover.Content>\n            </Popover>\n        );\n    }\n    \n}","import CSS from 'csstype';\nimport React from \"react\";\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Table from 'react-bootstrap/Table';\nimport NumberFormat from 'react-number-format';\nimport InputPopover from './InputPopover';\n\ntype State = {\n    callOrPut: string;\n    numberOfContracts: number | string;\n    optionPrice: number | string;\n    strikePrice: number | string;\n    stockPrice: number | string;\n    totalInvestment: number;\n    stockPriceValue: number;\n    strikePriceValue: number;\n    profit: number;\n    profitColor: string;\n}\n\nconst pillStyle: CSS.Properties = { padding: '3px', backgroundColor: '#546e7a', color: '#fff' };\nconst resultValueStyle: CSS.Properties = { textAlign: 'right' };\n\nconst learnMoreUrl = \"https://www.investopedia.com/articles/optioninvestor/03/073003.asp\";\n\nexport default class OptionsProfileCalc extends React.Component<any, State> {\n\n    constructor(prop: any) {\n        super(prop);\n        this.state = {\n            callOrPut: 'call',\n            numberOfContracts: 1,\n            optionPrice: 5.35,\n            strikePrice: 307.5,\n            stockPrice: 312.85,\n            totalInvestment: 0,\n            stockPriceValue: 0,\n            strikePriceValue: 0,\n            profit: 0,\n            profitColor: '#4caf50'\n        };\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleOptionChange = this.handleOptionChange.bind(this);\n        this.calculate = this.calculate.bind(this);\n        this.getDollarValue = this.getDollarValue.bind(this);\n        this.getProfitsCell = this.getProfitsCell.bind(this);\n    }\n\n    render() {\n        return (\n            <div>\n                <Jumbotron style={{ backgroundColor: '#37474f' }}>\n                    <h1>Stock Options Profit Calculator</h1>\n                    <p>\n                        A simple and lightweight app for calculating your stock option profits.  Enter in the below\n                        information and click <strong>Calculate</strong> to see how much money you can make on a single trade.\n                        </p>\n                    <p>\n                        <Button as=\"a\" target=\"_new\" href={learnMoreUrl} variant=\"primary\">Learn more about Stock Options</Button>\n                    </p>\n                </Jumbotron>\n\n                <CardDeck>\n                    <Card bg=\"dark\">\n                        <Card.Header>\n                            <h2>Inputs</h2>\n                        </Card.Header>\n                        <Card.Body>\n\n                            <div style={{ maxWidth: '350px' }}>\n\n                                <div style={{ marginBottom: '16px' }}>\n                                    <Form.Group controlId=\"callOrPut\">\n                                        <Form.Check inline label=\"Call\" value=\"call\" type=\"radio\" id=\"option-call\"\n                                            checked={this.state.callOrPut === 'call'}\n                                            onChange={this.handleOptionChange}\n                                        />\n                                        <Form.Check inline label=\"Put\" value=\"put\" type=\"radio\" id=\"option-put\"\n                                            checked={this.state.callOrPut === 'put'}\n                                            onChange={this.handleOptionChange}\n                                        />\n                                    </Form.Group>\n                                </div>\n\n                                <Form.Group controlId=\"numberOfContracts\">\n                                    <Form.Label># of Contracts (<span style={{ color: '#eceff1', fontSize: '14px' }}>1 contract = 100 shares</span>)</Form.Label>\n                                    <InputGroup>\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Text>#</InputGroup.Text>\n                                        </InputGroup.Prepend>\n                                        <Form.Control\n                                            size=\"lg\"\n                                            type=\"number\"\n                                            placeholder=\"Number\"\n                                            value={this.state.numberOfContracts}\n                                            onChange={this.handleInputChange}\n                                        />\n                                        <InputGroup.Append>\n                                            <OverlayTrigger trigger=\"hover\" placement=\"right\" overlay={\n                                                InputPopover.getPopover('# of Contracts', (\n                                                    <p>The total number of contracts that you will purchase for this trade.  \n                                                    Each contract equals 100 shares of the underlying stock.</p>\n                                                ))\n                                            }>\n                                                <Button variant=\"outline-secondary\">?</Button>\n                                            </OverlayTrigger>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </Form.Group>\n\n                                <Form.Group controlId=\"optionPrice\">\n                                    <Form.Label>Option Price (<span style={{ color: '#eceff1', fontSize: '14px' }}>Premium</span>)</Form.Label>\n                                    <InputGroup>\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Text>$</InputGroup.Text>\n                                        </InputGroup.Prepend>\n                                        <Form.Control\n                                            size=\"lg\"\n                                            type=\"number\"\n                                            placeholder=\"Number\"\n                                            value={this.state.optionPrice}\n                                            onChange={this.handleInputChange}\n                                        />\n                                        <InputGroup.Append>\n                                            <OverlayTrigger trigger=\"hover\" placement=\"right\" overlay={\n                                                InputPopover.getPopover('Option Price', (\n                                                    <p>This is the price, or premium that you pay for each contract.  Your total investment will be the Option Price x # of Contracts. \n                                                    <a target=\"_new\" href=\"https://www.investopedia.com/terms/o/option-premium.asp\">Learn More</a></p>\n                                                ))\n                                            }>\n                                                <Button variant=\"outline-secondary\">?</Button>\n                                            </OverlayTrigger>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </Form.Group>\n\n                                <Form.Group controlId=\"strikePrice\">\n                                    <Form.Label>Strike Price</Form.Label>\n                                    <InputGroup>\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Text>$</InputGroup.Text>\n                                        </InputGroup.Prepend>\n                                        <Form.Control\n                                            size=\"lg\"\n                                            type=\"number\"\n                                            placeholder=\"Number\"\n                                            value={this.state.strikePrice}\n                                            onChange={this.handleInputChange}\n                                        />\n                                        <InputGroup.Append>\n                                            <OverlayTrigger trigger=\"hover\" placement=\"right\" overlay={\n                                                InputPopover.getPopover('Strike Price', (\n                                                    <p>The strike price is the target price at which your contract can be bought or sold when it is exercised.\n                                                    In order to make a profit, you need the unerlying stock price to be greater than the stock price for a Call,\n                                                    and less than for a Put. \n                                                    <a target=\"_new\" href=\"https://www.investopedia.com/terms/s/strikeprice.asp\">Learn More</a></p>\n                                                ))\n                                            }>\n                                                <Button variant=\"outline-secondary\">?</Button>\n                                            </OverlayTrigger>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </Form.Group>\n\n                                <Form.Group controlId=\"stockPrice\">\n                                    <Form.Label>Stock Price</Form.Label>\n                                    <InputGroup>\n                                        <InputGroup.Prepend>\n                                            <InputGroup.Text>$</InputGroup.Text>\n                                        </InputGroup.Prepend>\n                                        <Form.Control\n                                            size=\"lg\"\n                                            type=\"number\"\n                                            placeholder=\"Number\"\n                                            value={this.state.stockPrice}\n                                            onChange={this.handleInputChange}\n                                        />\n                                        <InputGroup.Append>\n                                            <OverlayTrigger trigger=\"hover\" placement=\"right\" overlay={\n                                                InputPopover.getPopover('Stock Price', (\n                                                    <p>This is the price of the stock that you think it will be at in the future.  \n                                                    Change this up and down to see what price gets you the highest profit.</p>\n                                                ))\n                                            }>\n                                                <Button variant=\"outline-secondary\">?</Button>\n                                            </OverlayTrigger>\n                                        </InputGroup.Append>\n                                    </InputGroup>\n                                </Form.Group>\n\n                            </div>\n\n                        </Card.Body>\n                        <Card.Footer>\n                            <Button variant=\"primary\" size=\"lg\" onClick={this.calculate}>Calculate</Button>\n                        </Card.Footer>\n                    </Card>\n                    <Card bg=\"dark\">\n                        <Card.Header>\n                            <h2>Results</h2>\n                        </Card.Header>\n                        <Card.Body>\n\n                            <Table striped bordered hover variant=\"dark\">\n                                <tbody>\n                                    <tr>\n                                        <td>Total Investment</td>\n                                        <td style={resultValueStyle}><NumberFormat value={this.state.totalInvestment} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan={2}>\n                                            Option Price {this.getDollarValue(Number(this.state.optionPrice))} x # of Contracts \n                                            <span style={pillStyle}>{this.state.numberOfContracts}</span> x 100\n                                        </td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n\n                            <Table striped bordered hover variant=\"dark\">\n                                <tbody>\n                                    <tr>\n                                        <td>Stock Price Value</td>\n                                        <td style={resultValueStyle}><NumberFormat value={this.state.stockPriceValue} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan={2}>Total Investment {this.getDollarValue(this.state.totalInvestment)} x \n                                        Stock Price {this.getDollarValue(Number(this.state.stockPrice))}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n\n                            <Table striped bordered hover variant=\"dark\">\n                                <tbody>\n                                    <tr>\n                                        <td>Strike Price Value</td>\n                                        <td style={resultValueStyle}><NumberFormat value={this.state.strikePriceValue} displayType={'text'} thousandSeparator={true} prefix={'$'} /></td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan={2}>Total Investment {this.getDollarValue(this.state.totalInvestment)} x \n                                        Strike Price {this.getDollarValue(Number(this.state.strikePrice))}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n\n                            <Table striped bordered hover variant=\"dark\">\n                                <tbody>\n                                    <tr>\n                                        <td style={{fontSize: '32px'}}>Profit</td>\n                                        <td style={{...resultValueStyle, ...{fontSize: '32px', color: this.state.profitColor}}}>\n                                            <NumberFormat value={this.state.profit} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td colSpan={2}>{this.getProfitsCell()}</td>\n                                    </tr>\n                                </tbody>\n                            </Table>\n\n                        </Card.Body>\n                    </Card>\n                </CardDeck>\n\n            </div>\n        )\n    }\n\n    getProfitsCell() {\n\n        const elements = [];\n\n        const calcValuesCall = (\n            <div>\n                Stock Price Value {this.getDollarValue(this.state.stockPriceValue)} -\n                Strike Price Value {this.getDollarValue(this.state.strikePriceValue)} -\n                Total Investment {this.getDollarValue(this.state.totalInvestment)}\n            </div>\n        );\n\n        const calcValuesPut = (\n            <div>\n                Strike Price Value {this.getDollarValue(this.state.strikePriceValue)} -\n                Stock Price Value {this.getDollarValue(this.state.stockPriceValue)} -\n                Total Investment {this.getDollarValue(this.state.totalInvestment)}\n            </div>\n        );\n\n        if (this.state.callOrPut === 'call') {\n            elements.push(calcValuesCall);\n        } else {\n            elements.push(calcValuesPut);\n        }\n\n        const alert = (\n            <Alert variant=\"info\" style={{marginTop: '16px'}}>\n                Your total losses cannot exceed your total investment if you do not exercise your optoins.\n            </Alert>\n        );\n\n        if (this.state.profit < 0) {\n            elements.push(alert);\n        }\n\n        return elements;\n    }\n\n    getDollarValue(value: number) {\n        return (\n            <span style={pillStyle}>\n                <NumberFormat value={value} displayType={'text'} thousandSeparator={true} prefix={'$'} />\n            </span>\n        )\n    }\n\n    calculate() {\n        const numberOfStocks: number = Number(this.state.numberOfContracts) * 100;\n        const totalInvestment: number = Math.round(Number(this.state.optionPrice) * numberOfStocks);\n        const stockPriceValue: number = Math.round(numberOfStocks * Number(this.state.stockPrice));\n        const strikePriceValue: number = Math.round(numberOfStocks * Number(this.state.strikePrice));\n        let profit: number = (stockPriceValue - strikePriceValue) - totalInvestment;\n\n        if (this.state.callOrPut === 'put') {\n            profit = (strikePriceValue - stockPriceValue) - totalInvestment;\n        }\n\n        this.setState({\n            totalInvestment: totalInvestment,\n            stockPriceValue: stockPriceValue,\n            strikePriceValue: strikePriceValue,\n            profit: profit\n        });\n\n        if (profit < 0) {\n            this.setState({ profitColor: '#f44336' });\n        } else {\n            this.setState({ profitColor: '#4caf50' });\n        }\n\n    }\n\n    handleInputChange(event: any) {\n        this.setState({ [event.target.id]: event.target.value } as Pick<State, keyof State>);\n    }\n\n    handleOptionChange(event: any) {\n        this.setState({ callOrPut: event.target.value });\n    }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.scss';\nimport Footer from './component/Footer';\nimport Header from './component/Header';\nimport Home from './component/Home';\nimport OptionsProfileCalc from './component/options-profit-calc/OptionsProfitCalc';\nimport PathUtil from './util/PathUtil';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <div className=\"AppContent\">\n        <Router>\n          <Switch>\n            <Route exact path={PathUtil.getPath('/')}>\n              <Home></Home>\n            </Route>\n            <Route path={PathUtil.getPath('/options-calc')}>\n              <OptionsProfileCalc></OptionsProfileCalc>\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}